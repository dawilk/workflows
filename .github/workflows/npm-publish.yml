name: NPM Publish

on:
  workflow_call:
    secrets:
      NODE_AUTH_TOKEN:
        description: 'NPM Token used for publishing.'
        required: false
    inputs:
      # setup-node options with some typical defaults
      node-version:
        description: 'Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.'
        type: string
      node-version-file:
        description: 'File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version, .tool-versions.'
        type: string
      # architecture:
      #   description: 'Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.'
      #   type: string
      # check-latest:
      #   description: 'Set this option if you want the action to check for the latest available version that satisfies the version spec.'
      #   default: false
      registry-url:
        description: 'Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.'
        type: string
      scope:
        description: 'Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).'
        type: string
      token:
        default: ${{ github.token }}
        description: Used to pull node distributions from node-versions.  Since there's a default, this is typically not supplied by the user.
        type: string
      cache:
        default: npm
        description: 'Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.'
        type: string
      # cache-dependency-path:
      #   default: ./package-lock.json
      #   description: 'Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.'
      #   type: string

      # Configure private registry scope
      # This is only required if you need an additional registry+scope not captured by `registry-url` and `token`
      # To use one, all three are required 
      private-registry-url:
        description: ''
        type: string
      private-registry-scope:
        description: ''
        type: string
      private-registry-token:
        description: ''
        type: string

      cache-modules-path:
        default: ./node_modules
        description: 'Used to specify the node_modules path to cache.'
        type: string

      # Env vars for npm executions
      NODE_OPTIONS:
        default: '--max-old-space-size=6144'
        description: 'Used to set NODE_OPTIONS env var before running npm commands'
        type: string
        required: false

      working-directory:
        default: '.'
        description: 'Directory from which commands execute'
        type: string
        required: false
      
      # GitHub Actions artifact (required to pass the package to subsequent jobs)
      download-artifact:
        default: true
        description: 'Upload artifact to GitHub Actions'
        type: boolean
        required: false
      artifact-name:
        default: ''
        description: 'Artifact name to download from GitHub Actions (required if download-artifact: true)'
        type: string
        required: false

      publish-version:
        default: ''
        description: 'Publish package version (required if not using an artifact)'
        type: string
        required: false
      publish-prerelease:
        default: false
        description: 'Publish prerelease packages'
        type: boolean
        required: false
      publish-prerelease-tag:
        default: 'alpha'
        description: 'Tag for prerelease packages'
        type: string
        required: false
      publish-access:
        default: 'public'
        description: 'Publish public or restricted (private). Options: public, restricted'
        type: string
        required: false

defaults:
  run:
    shell: bash

jobs:
  publish:
    name: NPM Publish
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}
        node-version-file: ${{ inputs.node-version-file }}
        registry-url: ${{ inputs.registry-url }}
        scope: ${{ inputs.scope }}
        token: ${{ inputs.token }}
        cache: ${{ inputs.cache }}
        # cache-dependency-path: ${{ inputs.cache-dependency-path }}

    - name: Configure NPM Registry Scope
      if: ${{ inputs.private-registry-url != '' && inputs.private-registry-scope != '' && inputs.private-registry-token != '' }}
      run: |
        echo "Configuring scope @${{inputs.private-registry-scope}} (${{inputs.private-registry-url}})"
        PROTO=$(echo "${{inputs.private-registry-url}}" | sed -rn 's/^(https?):.*/\1/pg')
        test $PROTO || PROTO="https"
        URL=$(echo "${{inputs.private-registry-url}}" | sed -rn 's/^(https?:)?//pg')
        SCOPE=$(echo "${{inputs.private-registry-scope}}" | sed -rn 's/^@(.*)?/@\1/pg')
        npm config set "$SCOPE":registry $PROTO:$URL
        npm config set $URL/:_authToken ${{inputs.private-registry-token}}

    - name: Cache dependencies
      if: ${{ !inputs.download-artifact }}
      uses: actions/cache@v3
      id: cache-modules
      with:
        path: ${{ inputs.cache-modules-path }}
        key: modules-${{ hashFiles('package-lock.json') }}

    - name: Install Dependencies
      if: ${{ !inputs.download-artifact && steps.cache-modules.outputs.cache-hit != 'true' }}
      env:
        NODE_OPTIONS: ${{ inputs.NODE_OPTIONS }}
      working-directory: ${{ inputs.working-directory }}
      run: npm ci

    - name: Set Version (if not using an artifact)
      if: ${{ !inputs.download-artifact }}
      env:
        NODE_OPTIONS: ${{ inputs.NODE_OPTIONS }}
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [[ -z "${{inputs.publish-version}}" ]]; then
          echo "::error Missing both download-artifact and publish-version. One of these MUST be supplied!"
        fi
        VERSION="${{inputs.publish-version}}"
        if ${{inputs.publish-prerelease}}; then
          VERSION+="-${{inputs.publish-prerelease-tag}}.${{github.run_id}}"
        fi
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

        npm version $VERSION --no-git-tag-version

    - name: Build Package
      if: ${{ !inputs.download-artifact }}
      env:
        NODE_OPTIONS: ${{ inputs.NODE_OPTIONS }}
      working-directory: ${{ inputs.working-directory }}
      run: |
        npm run build --if-present

    - name: Determine Release Tag
      run: |
        if ${{inputs.publish-prerelease}}; then
          PACKAGE_TAG="${{inputs.publish-prerelease-tag}}"
        else
          PACKAGE_TAG="latest"
        fi
        echo "PACKAGE_TAG=$PACKAGE_TAG" >> $GITHUB_ENV

    - name: Set Step Summary
      if: ${{ !inputs.download-artifact }}
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "### Publish Information" >> $GITHUB_STEP_SUMMARY
        echo "* Package: " $(node -e 'console.log(require("./package.json").name)') >> $GITHUB_STEP_SUMMARY
        echo "* Version: $PACKAGE_VERSION" >> $GITHUB_STEP_SUMMARY
        echo "* Tag: @ $PACKAGE_TAG" >> $GITHUB_STEP_SUMMARY

    - name: Download Artifact
      uses: actions/download-artifact@v3
      if: ${{ inputs.download-artifact }}
      with:
        path: ${{ github.workspace }}/artifact-${{ github.sha }}
        name: ${{ inputs.artifact-name }}

    - name: "NPM Publish Artifact"
      if: ${{ inputs.download-artifact }}
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        NODE_OPTIONS: ${{ inputs.NODE_OPTIONS }}
      run: |
        npm publish ${{ github.workspace }}/artifact-${{ github.sha }}/${{ inputs.artifact-name }} --tag $PACKAGE_TAG --access ${{ inputs.publish-access }}

    - name: NPM Publish
      if: ${{ !inputs.download-artifact }}
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        NODE_OPTIONS: ${{ inputs.NODE_OPTIONS }}
      working-directory: ${{ inputs.working-directory }}
      run: |
        npm publish --tag $PACKAGE_TAG --access ${{ inputs.publish-access }}
